---
title: "Research"
date: last-modified
date-format: "MM/DD/YYYY"
author:
  - name: Seungju Kim
    orcid: 0009-0009-5166-9170
    email: seungju7@illinois.edu
    affiliation: 
      - name: University of Illinois, Urbana-Champaign
        department: Psychology
title-block-banner: false
format: html
comments: false
description: "" 
listing:
  - id: published
    include: 
      type: "Published"
    contents: papers.yaml
    template: papers.ejs
    filter-ui: false
    sort: "date desc"
    sort-ui: false
    #categories: true  
  - id: preprints
    include: 
      type: "Preprint"    # Changed from lowercase "preprint" to "Preprint" to match YAML
    contents: papers.yaml
    template: papers.ejs
    #filter-ui: true
    sort: "date desc" 
    sort-ui: false
    #categories: true
toc: true    
#page-layout: full
editor_options: 
  chunk_output_type: console
---

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
#| include: FALSE
# Required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(scholar, rcrossref, dplyr, stringr, htmltools, here, tidyverse, ggiraph, patchwork, gdtools, gfonts)

# Register a web font for better consistency
register_gfont("Inter")
```

<a href="https://docs.google.com/document/d/1bB2WnhJIigiq-S9CmZNKPpmEYytFz98U/export?format=pdf" 
   class="btn btn-success" 
   target="_blank"
   id="cv-download-button"
   data-tracking="cv-download">
    <i class="bi bi-file-earmark-pdf"></i> Download CV
</a>
<span id="count" class="badge bg-primary ms-2">0</span>


<script type="module">
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-app.js';
  import { getFirestore, doc, getDoc, runTransaction } from 'https://www.gstatic.com/firebasejs/9.6.1/firebase-firestore.js';

  document.addEventListener('DOMContentLoaded', function() {
    // Your web app's Firebase configuration
    const firebaseConfig = {
      apiKey: "{{ FB_API }}",
      authDomain: "cv-download-40a41.firebaseapp.com",
      projectId: "cv-download-40a41",
      storageBucket: "cv-download-40a41.firebasestorage.app",
      messagingSenderId: "842134969852",
      appId: "{{ APPID }}",
      measurementId: "G-7149VRMDP5"
    };

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const countRef = doc(db, "counts", "cvDownload"); // Updated to match your new structure

    // Function to increment the CV download count
    async function incrementCount() {
      console.log("Increment button clicked");
      try {
        await runTransaction(db, async (transaction) => {
          const countDoc = await transaction.get(countRef);
          if (!countDoc.exists()) {
            console.log("Document does not exist. Creating new document.");
            transaction.set(countRef, { counts: 1 }); // Changed count to counts to match your field name
          } else {
            const newCount = countDoc.data().counts + 1; // Changed count to counts
            console.log("Document exists. Updating count to:", newCount);
            transaction.update(countRef, { counts: newCount }); // Changed count to counts
          }
        });
        console.log("Transaction successful!");
        getCount();
      } catch (error) {
        console.error("Transaction failed:", error);
      }
    }

    // Function to get the current CV download count
    async function getCount() {
      console.log("Fetching count from Firestore");
      try {
        const countDoc = await getDoc(countRef);
        if (countDoc.exists()) {
          console.log("Count document exists:", countDoc.data());
          document.getElementById("count").innerText = countDoc.data().counts; // Changed count to counts
        } else {
          console.log("Count document does not exist");
          document.getElementById("count").innerText = "0";
        }
      } catch (error) {
        console.error("Error getting document:", error);
      }
    }

    // Load the current count when the page loads
    getCount();

    // Attach event listener to the CV download button
    document.getElementById('cv-download-button').addEventListener('click', incrementCount);
  });
</script>

```{r}
#| echo: FALSE
#| warning: FALSE
#| asis: TRUE

scholar_id <- "JWNJV9UAAAAJ"

# Try to read from cached CSV files first, fallback to API
citation_file <- here("research", "citations.csv")
publications_file <- here("research", "publications.csv")

# Get citation data
if (file.exists(citation_file)) {
  citation_data <- read.csv(citation_file)
  message("Using cached citation data from: ", citation_file)
} else {
  tryCatch({
    citation_data <- get_citation_history(scholar_id) %>%
      as.data.frame()
    dir.create(here("research"), showWarnings = FALSE, recursive = TRUE)
    write.csv(citation_data, citation_file, row.names = FALSE)
    message("Fetched new citation data and saved to: ", citation_file)
  }, error = function(e) {
    warning(paste("Error fetching citation data:", e$message))
    citation_data <<- data.frame(
      year = c(2020, 2021, 2022, 2023, 2024, 2025),
      cites = c(0, 0, 0, 3, 4, 0)
    )
  })
}

# Get publication data
if (file.exists(publications_file)) {
  publication_data <- read.csv(publications_file)
  message("Using cached publication data from: ", publications_file)
  # Check if we need to recalculate due to OSF filtering
  # If total publications is 7, we likely need to refresh the data
} else {
  publication_data <- NULL
}

# Always fetch fresh data to apply OSF filter (you can comment this out later)
tryCatch({
  publications_raw <- get_publications(scholar_id)
  if (is.data.frame(publications_raw) && "year" %in% colnames(publications_raw)) {
    # Debug: print original data
    message("Original publications: ", nrow(publications_raw))
    message("Publications with OSF: ", sum(grepl("OSF", publications_raw$journal, ignore.case = TRUE)))
    
    # Filter out OSF publications and count
    publication_data <- publications_raw %>%
      filter(!is.na(year)) %>%  # Remove rows with missing years first
      filter(!grepl("OSF", journal, ignore.case = TRUE)) %>%  # Remove OSF publications
      count(year, name = "publications")  # Count publications per year
    
    # Debug: print filtered data
    message("Publications after filtering OSF: ", sum(publication_data$publications))
    
    # Save the updated data
    dir.create(here("research"), showWarnings = FALSE, recursive = TRUE)
    write.csv(publication_data, publications_file, row.names = FALSE)
    message("Updated publication data saved to: ", publications_file)
  } else {
    # Fallback: use citation years but adjust for known OSF count
    publication_data <- data.frame(
      year = c(2024, 2025),
      publications = c(1, 4)  # Manually adjusted: 1 in 2024 (3-2 OSF), 4 in 2025
    )
  }
}, error = function(e) {
  warning(paste("Error fetching publication data:", e$message))
  # Use fallback with correct counts (excluding OSF)
  publication_data <- data.frame(
    year = c(2024, 2025),
    publications = c(1, 4)  # 1 in 2024 (3-2 OSF), 4 in 2025
  )
})

# Calculate totals
total_citations <- sum(citation_data$cites)
total_publications <- sum(publication_data$publications)

# Create citations plot (horizontal)
citations_plot <- citation_data %>%
  ggplot(aes(x = cites, y = as.factor(year))) +
  geom_col_interactive(
    aes(tooltip = cites),
    fill = "#4A90A4",
    width = 0.7
  ) +
  labs(
    title = "Citation History Over Time",
    subtitle = paste("Total Citations:", total_citations),
    x = "# of Citations",
    y = "Year"
  ) +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#0E2638", color = NA),
    panel.background = element_rect(fill = "#0E2638", color = NA),
    plot.title = element_text(size = 14, face = "bold", color = "#EBEBEB", family = "Helvetica"),
    plot.subtitle = element_text(size = 12, color = "#EBEBEB", family = "Helvetica"),
    axis.title = element_text(size = 12, color = "#EBEBEB", family = "Helvetica"),
    axis.text = element_text(size = 10, color = "#EBEBEB", family = "Helvetica"),
    axis.line = element_line(color = "#EBEBEB", size = 0.5),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

# Create publications plot (horizontal)
publications_plot <- publication_data %>%
  ggplot(aes(x = publications, y = as.factor(year))) +
  geom_col_interactive(
    aes(tooltip = publications),
    fill = "#7FB069",
    width = 0.7
  ) +
  labs(
    title = "Publications Over Time",
    subtitle = paste("Total Publications:", total_publications),
    x = "# of Publications",
    y = "Year"
  ) +
  theme_minimal() +
  theme(
    plot.background = element_rect(fill = "#0E2638", color = NA),
    panel.background = element_rect(fill = "#0E2638", color = NA),
    plot.title = element_text(size = 14, face = "bold", color = "#EBEBEB", family = "Helvetica"),
    plot.subtitle = element_text(size = 12, color = "#EBEBEB", family = "Helvetica"),
    axis.title = element_text(size = 12, color = "#EBEBEB", family = "Helvetica"),
    axis.text = element_text(size = 10, color = "#EBEBEB", family = "Helvetica"),
    axis.line = element_line(color = "#EBEBEB", size = 0.5),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank()
  )

# Combine plots side by side
combined_plot <- citations_plot + publications_plot + 
  plot_layout(ncol = 2) +
  plot_annotation(
    caption = paste("Data from Google Scholar (", Sys.Date(), ")", sep = ""),
    theme = theme(
      plot.background = element_rect(fill = "#0E2638", color = NA),
      plot.caption = element_text(size = 10, color = "#EBEBEB", family = "Helvetica")
    )
  )

# Create the girafe object with Helvetica font
interactive_plot <- girafe(
  ggobj = combined_plot,
  width_svg = 12,
  height_svg = 5,
  fonts = list(sans = "Helvetica")
)

interactive_plot
```


## Published Papers

:::{#published}
:::

## Preprints
:::callout-warning
A preprint is an early-stage research paper not yet peer-reviewed or published in a scientific journal. Findings should be considered preliminary, may contain errors, and could change substantially in the final published version. While preprints promote rapid scientific exchange, they should not be cited as established scientific fact, reported as definitive in news media, or used to guide clinical decisions without appropriate context.
:::

:::{#preprints}
:::